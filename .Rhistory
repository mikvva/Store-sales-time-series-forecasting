install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
chooseCRANmirror()
install.packages("bayesian-optimization")
chooseCRANmirror()
chooseCRANmirror()
q()
oer
install.packages("tidyverse")
data(tips, package = 'reshape2')
install.packages("reshape2")
data(tips, package = 'reshape2')
library(ggplot2)
#install.packages("reshape2")
install.packages("ggplot2")
data(tips, package = 'reshape2')
library(ggplot2)
qplot(total_bill, tip, data=tips, geom = "point")
install.packages("reshape2")
install.packages("ggplot2")
data(tips, package = 'reshape2')
library(ggplot2)
library(ggplot2)
install.packages("colorspace")
install.packages("colorspace")
library(ggplot2)
data(tips, package = 'reshape2')
qplot(total_bill, tip, data=tips, geom = "point")
data(tips, package = 'reshape2')
myplot <- ggplot(tips, aes(x = total_bill, y = tip)) +
geom_point(aes(color = sex)) +
geom_smooth(method = 'lm')
View(myplot)
View(myplot)
layer_point <- geom_point(
mapping = aes(x = total_bill, y = tip, color = sex),
data = tips,
size = 3
)
ggplot() + layer_point
r_point <- geom_bar(
mapping = aes(x = total_bill, y = tip, color = sex),
data = tips,
size = 3
)
ggplot() + layer_point
layer_point <- geom_bar(
mapping = aes(x = total_bill, y = tip, color = sex),
data = tips,
size = 3
)
ggplot() + layer_point
layer_point <- geom_abline(
mapping = aes(x = total_bill, y = tip, color = sex),
data = tips,
size = 3
)
ggplot() + layer_point
layer_point <- geom_point(
mapping = aes(x = total_bill, y = tip, color = sex),
data = tips,
size = 3
)
ggplot() + layer_point
model <- lm(tip ~ total_bill, data = tips)
fitted_tips <- data.frame(
total_bill = tips$total_bill,
predict(model, interval = "confidence")
)
head(fitted_tips)
ggplot() + layer_point
layer_line <- geom_line(
mapping = aes(x = total_bill, y = fit),
data = fitted_tips,
color = "darkred"
)
ggplot() + layer_point + layerline
layer_line <- geom_line(
mapping = aes(x = total_bill, y = fit),
data = fitted_tips,
color = "darkred"
)
ggplot() + layer_point + layerline
layer_line <- geom_line(
mapping = aes(x = total_bill, y = fit),
data = fitted_tips,
color = "darkred"
)
ggplot() + layer_point + layerline
ggplot() + layer_point + layer_line
?geom_ribbon
layer_line <- geom_line(
mapping = aes(x = total_bill, y = tip),
data = tips,
color = "darkred"
)
ggplot() + layer_point + layer_line
layer_line <- geom_line(
mapping = aes(x = total_bill, y = tip),
data = tips,
stat = "smooth"
method = "lm"
layer_line <- geom_line(
mapping = aes(x = total_bill, y = tip),
data = tips,
stat = "smooth",
method = "lm",
color = "darkred"
)
ggplot() + layer_point + layer_line
layer_line <- geom_smooth(method='lm')
ggplot() + layer_point + layer_line
layer_line <- geom_smooth(tip ~ total_bill, method='lm')
ggplot() + layer_point + layer_line
library(readr)
tute1 <- read_csv("http://otexts.com/fpp2/extrafiles/tute1.csv")
install.packages("tidyselect")
tute1 <- read_csv("http://otexts.com/fpp2/extrafiles/tute1.csv")
View(tute1)
autoplot(mytimeseries)
# The [, -1] removes the first column which contains the quarters
mytimeseries <- ts(tutel[, -1], start=1981, frequency = 4)
# The [, -1] removes the first column which contains the quarters
mytimeseries <- ts(tute1[, -1], start=1981, frequency = 4)
autoplot(mytimeseries)
autoplot(mytimeseries, facets = TRUE)
rlang::last_error()
install.packages("tidyverse")
install.packages("gsubf")
autoplot(mytimeseries, facets = TRUE)
install.packages("ggfortify")
library(ggplot2)
library(ggfortify)
install.packages("USAccDeaths")
library(USAccDeaths)
autoplot(mytimeseries, facets = TRUE)
install.packages("zoo")
library(zoo)
autoplot(mytimeseries, facets = TRUE)
autoplot(mytimeseries)
autoplot(mytimeseries, facets =T)
autoplot(mytimeseries, facets =F)
autoplot(mytimeseries, facets =T)
getwd()
# the seconf argument is required because the excel sheet has two header rows
retaildata <- readxl::read_excel("retail.xlsl", skip=1)
# the seconf argument is required because the excel sheet has two header rows
retaildata <- readxl::read_excel("retail.xlsx", skip=1)
myts <- ts(retaildata[, "A3349873A"], frequency = 12, start=c(1984,4))
autoplot(myts)
ggseasonalplot(myts)
ggseasonplot(myts)
install.packages("forecast")
ggseasonplot(myts)
library(forecast)
ggseasonplot(myts)
ggsubseriesplot(myts)
ggAcf(myts)
gglagplot(myts)
?mutate
library(forecast)
library(tidyverse)
library(zeallot)
library(glue)
getwd()
train = read.csv("./R/fossil/Train.csv")
test = read.csv("./R/fossil/Test.csv")
head(test)
train <- train %>% arrange(year, month)
head(train)
test <- test %>% arrange(year, month)
head(test)
print(colnames(train))
sellin_channels <- train%>%
select(starts_with("sellin_channel")) %>%
colnames()
print(sellin_channels)
df <- train[c("sku_name", "year", "month", "sellin")]
head(df)
dim(df)
next_month <- function(year, month){
if(month + 1 <= 12){
return(c(year, month+1))
}
if(year == 2020){
year = year + 1
}
return(c(year, 1))
}
filler <- function(frame){
vals <- list()
year <- 2016
month  <- 1
for(i in 1:nrow(frame)){
val <- frame[i, "sellin"]
yr <- frame[i, "year"]
mon <- frame[i, "month"]
}
while(1){
if(yr == year & mon == month){
c(year, month) %<-% next_month(year, month)
break
}
c(year, month) %<-% next_month(year, month)
vals <- as.numeric(append(vals, 0))
}
vals <- as.numeric(append(val))
while (1){
if (year == 2021 & month > 10){
break
vals <- as.numeric(append(vals, 0))
c(year, month) %<-% next_month(year, month)
}
}
# print(vals)
return(vals)
}
to_df_main <- function(series){
ds <- list()
y <- list()
year <- 2016
month <- 1
for(i in 1:length(series)){
month <- fapply(month, "%02d")
ds.append(glue("{year}-{month}"))
y <- append(y, series[i])
c(year, month) %<-% next_month(year, month)
}
return(data.frame(ds, y))
}
to_df <- function(dframe){
dframe$month <- sapply("%02d", sprintf, dframe$month)
dframe <- dframe %>%
mutate(
ds = glue("{year}-{month}"),
y = sellin
)
dframe <- dframe[c("ds", "y")]
}
sku_names <- unique(test$sku_name)
for(sku in sku_names){
data <- df[df$sku_name == sku]
data <- data[c("sellin", "month", "year")]
}
for(sku in sku_names){
data <- df[df$sku_name == sku,]
data <- data[c("sellin", "month", "year")]
}
data <- to_df(data)
to_df <- function(dframe){
dframe$month <- sapply("%02d", sprintf, dframe$month)
dframe <- dframe %>%
mutate(
ds = glue("{year}-{month}"),
y = sellin
)
dframe <- dframe[c("ds", "y")]
retur(dframe)
}
data <- to_df(data)
library(forecast)
library(tidyverse)
library(zeallot)
library(glue)
getwd()
train = read.csv("./R/fossil/Train.csv")
test = read.csv("./R/fossil/Test.csv")
head(test)
train <- train %>% arrange(year, month)
head(train)
test <- test %>% arrange(year, month)
head(test)
print(colnames(train))
sellin_channels <- train%>%
select(starts_with("sellin_channel")) %>%
colnames()
print(sellin_channels)
df <- train[c("sku_name", "year", "month", "sellin")]
head(df)
dim(df)
next_month <- function(year, month){
if(month + 1 <= 12){
return(c(year, month+1))
}
if(year == 2020){
year = year + 1
}
return(c(year, 1))
}
filler <- function(frame){
vals <- list()
year <- 2016
month  <- 1
for(i in 1:nrow(frame)){
val <- frame[i, "sellin"]
yr <- frame[i, "year"]
mon <- frame[i, "month"]
}
while(1){
if(yr == year & mon == month){
c(year, month) %<-% next_month(year, month)
break
}
c(year, month) %<-% next_month(year, month)
vals <- as.numeric(append(vals, 0))
}
vals <- as.numeric(append(val))
while (1){
if (year == 2021 & month > 10){
break
vals <- as.numeric(append(vals, 0))
c(year, month) %<-% next_month(year, month)
}
}
# print(vals)
return(vals)
}
to_df_main <- function(series){
ds <- list()
y <- list()
year <- 2016
month <- 1
for(i in 1:length(series)){
month <- fapply(month, "%02d")
ds.append(glue("{year}-{month}"))
y <- append(y, series[i])
c(year, month) %<-% next_month(year, month)
}
return(data.frame(ds, y))
}
to_df <- function(dframe){
dframe$month <- sapply("%02d", sprintf, dframe$month)
dframe <- dframe %>%
mutate(
ds = glue("{year}-{month}"),
y = sellin
)
dframe <- dframe[c("ds", "y")]
retur(dframe)
}
sku_names <- unique(test$sku_name)
for(sku in sku_names){
data <- df[df$sku_name == sku,]
data <- data[c("sellin", "month", "year")]
}
data <- to_df(data)
library(forecast)
library(tidyverse)
library(zeallot)
library(glue)
getwd()
train = read.csv("./R/fossil/Train.csv")
test = read.csv("./R/fossil/Test.csv")
head(test)
train <- train %>% arrange(year, month)
head(train)
test <- test %>% arrange(year, month)
head(test)
print(colnames(train))
sellin_channels <- train%>%
select(starts_with("sellin_channel")) %>%
colnames()
print(sellin_channels)
df <- train[c("sku_name", "year", "month", "sellin")]
head(df)
dim(df)
next_month <- function(year, month){
if(month + 1 <= 12){
return(c(year, month+1))
}
if(year == 2020){
year = year + 1
}
return(c(year, 1))
}
filler <- function(frame){
vals <- list()
year <- 2016
month  <- 1
for(i in 1:nrow(frame)){
val <- frame[i, "sellin"]
yr <- frame[i, "year"]
mon <- frame[i, "month"]
}
while(1){
if(yr == year & mon == month){
c(year, month) %<-% next_month(year, month)
break
}
c(year, month) %<-% next_month(year, month)
vals <- as.numeric(append(vals, 0))
}
vals <- as.numeric(append(val))
while (1){
if (year == 2021 & month > 10){
break
vals <- as.numeric(append(vals, 0))
c(year, month) %<-% next_month(year, month)
}
}
# print(vals)
return(vals)
}
to_df_main <- function(series){
ds <- list()
y <- list()
year <- 2016
month <- 1
for(i in 1:length(series)){
month <- fapply(month, "%02d")
ds.append(glue("{year}-{month}"))
y <- append(y, series[i])
c(year, month) %<-% next_month(year, month)
}
return(data.frame(ds, y))
}
to_df <- function(dframe){
dframe$month <- sapply("%02d", sprintf, dframe$month)
dframe <- dframe %>%
mutate(
ds = glue("{year}-{month}"),
y = sellin
)
dframe <- dframe[c("ds", "y")]
return(dframe)
}
sku_names <- unique(test$sku_name)
for(sku in sku_names){
data <- df[df$sku_name == sku,]
data <- data[c("sellin", "month", "year")]
}
data <- to_df(data)
head(data)
